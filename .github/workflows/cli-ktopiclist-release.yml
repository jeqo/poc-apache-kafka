name: 'cli:topic-list:release'

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Release version"
        required: true
      next:
        description: "Next version"
        required: false

jobs:
  version:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: 'Set up Java'
        uses: actions/setup-java@v2
        with:
          java-version: 17
          distribution: 'zulu'

      - name: 'Cache Maven packages'
        uses: actions/cache@v2.1.7
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: 'Set release version'
        id: version
        working-directory: cli/topic-list
        run: |
          RELEASE_VERSION=${{ github.event.inputs.version }}
          NEXT_VERSION=${{ github.event.inputs.next }}
          PLAIN_VERSION=`echo ${RELEASE_VERSION} | awk 'match($0, /^(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)/) { print substr($0, RSTART, RLENGTH); }'`
          COMPUTED_NEXT_VERSION="${PLAIN_VERSION}-SNAPSHOT"
          if [ -z $NEXT_VERSION ]
          then
            NEXT_VERSION=$COMPUTED_NEXT_VERSION
          fi
          ./mvnw -B --file pom.xml versions:set versions:commit -DnewVersion=$RELEASE_VERSION
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global user.name "GitHub Action"
          git commit -a -m "üèÅ Releasing version $RELEASE_VERSION"
          git push origin HEAD:main
          git rev-parse HEAD > HEAD
          echo $RELEASE_VERSION > RELEASE_VERSION
          echo $PLAIN_VERSION > PLAIN_VERSION
          echo $NEXT_VERSION > NEXT_VERSION

      - name: 'Upload version files'
        uses: actions/upload-artifact@v2
        with:
          name: artifacts
          path: |
            cli/topic-list/HEAD
            cli/topic-list/*_VERSION

  # Build native executable per runner
  build:
    needs: [ version ]
    name: 'Build with Graal on ${{ matrix.os }}'
    strategy:
      fail-fast: true
      matrix:
        os: [ ubuntu-latest, macOS-latest, windows-latest ]
    runs-on: ${{ matrix.os }}

    steps:
      - name: 'Download all build artifacts'
        uses: actions/download-artifact@v2

      - name: 'Read HEAD ref'
        id: head
        uses: juliangruber/read-file-action@v1
        with:
          path: artifacts/cli/topic-list/HEAD

      - name: 'Check out repository'
        uses: actions/checkout@v2
        with:
          ref: ${{ steps.head.outputs.content }}

      - name: 'Add Developer Command Prompt for Microsoft Visual C++ '
        if: ${{ runner.os == 'Windows' }}
        uses: ilammy/msvc-dev-cmd@v1

      - uses: graalvm/setup-graalvm@v1
        with:
          version: '22.0.0.2'
          java-version: '17'
          components: 'native-image'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: 'Cache Maven packages'
        uses: actions/cache@v2.1.7
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: 'Build Native Image (Linux)'
        if: ${{ runner.os == 'Linux' }}
        working-directory: cli/topic-list/
        run: ./mvnw -B --file pom.xml -Pnative package

      - name: 'Build Native Image (macOS, Windows)'
        if: ${{ runner.os == 'macOS' || runner.os == 'Windows' }}
        working-directory: cli/topic-list/
        run: ./mvnw -B --file pom.xml -Pnative package "-Dquarkus.test.profile.tags=basic"

      - name: 'Create distribution'
        working-directory: cli/topic-list/
        run: ./mvnw -B --file pom.xml -Pdist package -DskipTests

      - name: 'Upload build artifact'
        uses: actions/upload-artifact@v2
        with:
          name: artifacts
          path: |
            cli/topic-list/target/*.zip
            cli/topic-list/target/*.tar.gz

  # Collect all executables and release
  release:
    needs: [ build ]
    runs-on: ubuntu-latest

    steps:
      # must read HEAD before checkout
      - name: 'Download all build artifacts'
        uses: actions/download-artifact@v2

      - name: 'Read HEAD ref'
        id: head
        uses: juliangruber/read-file-action@v1
        with:
          path: artifacts/HEAD

      - name: 'Read versions'
        id: version
        run: |
          RELEASE_VERSION=`cat artifacts/RELEASE_VERSION`
          PLAIN_VERSION=`cat artifacts/PLAIN_VERSION`
          NEXT_VERSION=`cat artifacts/NEXT_VERSION`
          echo "RELEASE_VERSION = $RELEASE_VERSION"
          echo "PLAIN_VERSION   = $PLAIN_VERSION"
          echo "NEXT_VERSION    = $NEXT_VERSION"
          echo "::set-output name=RELEASE_VERSION::$RELEASE_VERSION"
          echo "::set-output name=PLAIN_VERSION::$PLAIN_VERSION"
          echo "::set-output name=NEXT_VERSION::$NEXT_VERSION"

      - name: 'Check out repository'
        uses: actions/checkout@v2
        with:
          ref: ${{ steps.head.outputs.content }}
          fetch-depth: 0

      # checkout will clobber downloaded artifacts
      # we have to download them again
      - name: 'Download all build artifacts'
        uses: actions/download-artifact@v2

      - name: 'Set up Java'
        uses: actions/setup-java@v2
        with:
          java-version: 17
          distribution: 'zulu'

      - name: 'Cache Maven packages'
        uses: actions/cache@v2.1.7
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: 'Release with JReleaser'
        env:
          JRELEASER_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#          JRELEASER_SDKMAN_CONSUMER_KEY: ${{ secrets.JRELEASER_SDKMAN_CONSUMER_KEY }}
#          JRELEASER_SDKMAN_CONSUMER_TOKEN: ${{ secrets.JRELEASER_SDKMAN_CONSUMER_TOKEN }}
#          JRELEASER_HOMEBREW_GITHUB_TOKEN: ${{ secrets.JRELEASER_HOMEBREW_GITHUB_TOKEN }}
        working-directory: cli/topic-list
        run: ./mvnw -B --file pom.xml -Prelease -DartifactsDir=artifacts jreleaser:full-release

      - name: JReleaser output
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: jreleaser-logs
          path: |
            cli/topic-list/target/jreleaser/trace.log
            cli/topic-list/target/jreleaser/output.properties

      - name: 'Set next version'
        env:
          NEXT_VERSION: ${{ steps.version.outputs.NEXT_VERSION }}
        working-directory: cli/topic-list
        run: |
          ./mvnw -B --file pom.xml versions:set versions:commit -DnewVersion=$NEXT_VERSION
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global user.name "GitHub Action"
          git commit -a -m "‚¨ÜÔ∏è  Next version $NEXT_VERSION"
          git push origin HEAD:main